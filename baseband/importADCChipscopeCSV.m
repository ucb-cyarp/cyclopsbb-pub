function [adc_pipeline_data_ch0,adc_pipeline_data_ch1,adc_piepline_valid] = importADCChipscopeCSV(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors. (by
%default, the 1st row is assumed to be a header)
%   [ADC_PIPELINE_DATA_CH0130,ADC_PIPELINE_DATA_CH1130,ADC_PIEPLINE_VALID]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [ADC_PIPELINE_DATA_CH0130,ADC_PIPELINE_DATA_CH1130,ADC_PIEPLINE_VALID]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [adc_pipeline_data_ch0130,adc_pipeline_data_ch1130,adc_piepline_valid] = importfile('after_dc_offset_correction_lower_rx_gain_trial3_adc.csv',1, 16385);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/02/22 10:40:26

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Format string for each line of text:
%   column9: text (%s)
%	column10: text (%s)
%   column24: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%*s%*s%*s%*s%*s%*s%*s%s%s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%s%*s%*s%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
adc_pipeline_data_ch0_tmp = dataArray{:, 1};
adc_pipeline_data_ch1_tmp = dataArray{:, 2};
adc_piepline_valid_tmp = dataArray{:, 3};

hex_bits = 16;
total_bits = 14;
frac_bits  = 11;

q_int = quantizer('mode', 'ufixed', [hex_bits, 0]);
q_frac = quantizer('mode', 'fixed', [total_bits, frac_bits]);

%after_cr_im130_tmp = after_cr_im130_tmp(2:length(after_cr_im130_tmp));
%after_cr_re130_tmp = after_cr_re130_tmp(2:length(after_cr_re130_tmp));
%selected_sample_i130_tmp = selected_sample_i130_tmp(2:length(selected_sample_i130_tmp));
%selected_sample_q130_tmp = selected_sample_q130_tmp(2:length(selected_sample_q130_tmp));

for i = 1:length(adc_pipeline_data_ch0_tmp)
    adc_pipeline_data_ch0(i) = bin2num(q_frac, num2bin(q_int, hex2dec(adc_pipeline_data_ch0_tmp(i))));
    adc_pipeline_data_ch1(i) = bin2num(q_frac, num2bin(q_int, hex2dec(adc_pipeline_data_ch1_tmp(i))));
    adc_piepline_valid(i) = str2num(adc_piepline_valid_tmp{i});
    disp(num2str(i))
end


