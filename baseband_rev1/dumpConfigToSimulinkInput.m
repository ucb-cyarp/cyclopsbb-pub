%% Dump Radio Config Variables into SimulinkInput structure
%This is required to run the simulation on multiple runners

%An alternative would be to save the workspace as a .mat file and to load
%variables from that.  However, that would take a fair amount of time and
%require increased file I/O

% Update this using the following regex on the rev1BB_setup function
% Find: %.*
% Replace: 
% Find: (\S*)[ ]*=.*
% Replace: simInputs(configInd) = simInputs(configInd).setVariable('$1', $1);

%From rev1BB_simParams_setup
simInputs(configInd) = simInputs(configInd).setVariable('type', type);
simInputs(configInd) = simInputs(configInd).setVariable('src', src);
simInputs(configInd) = simInputs(configInd).setVariable('dst', dst);
simInputs(configInd) = simInputs(configInd).setVariable('net_id', net_id);
simInputs(configInd) = simInputs(configInd).setVariable('len', len);
simInputs(configInd) = simInputs(configInd).setVariable('local_node_id', local_node_id);
simInputs(configInd) = simInputs(configInd).setVariable('pad_first', pad_first);

%From rev1BB_setup
simInputs(configInd) = simInputs(configInd).setVariable('TxResampleModulatorPartition', TxResampleModulatorPartition);
simInputs(configInd) = simInputs(configInd).setVariable('TxRRCFilterPartition', TxRRCFilterPartition);
%Patrtitions
simInputs(configInd) = simInputs(configInd).setVariable('RxRRCPartition', RxRRCPartition);
simInputs(configInd) = simInputs(configInd).setVariable('RxAGCPwrAvgPartition', RxAGCPwrAvgPartition);
simInputs(configInd) = simInputs(configInd).setVariable('RxAGCCorrectionLoopPartition', RxAGCCorrectionLoopPartition);
simInputs(configInd) = simInputs(configInd).setVariable('RxTimingRecoveryGolayCorrelatorPartition', RxTimingRecoveryGolayCorrelatorPartition);
simInputs(configInd) = simInputs(configInd).setVariable('RxTimingRecoveryGolayPeakDetectPartition', RxTimingRecoveryGolayPeakDetectPartition);
simInputs(configInd) = simInputs(configInd).setVariable('RxTimingRecoveryControlPartition', RxTimingRecoveryControlPartition);
simInputs(configInd) = simInputs(configInd).setVariable('RxTimingRecoveryCalcDelayError', RxTimingRecoveryCalcDelayError);
simInputs(configInd) = simInputs(configInd).setVariable('RxTimingRecoveryFreqEstPartition', RxTimingRecoveryFreqEstPartition);
simInputs(configInd) = simInputs(configInd).setVariable('RxTimingRecoveryDelayAccumPartition', RxTimingRecoveryDelayAccumPartition);
simInputs(configInd) = simInputs(configInd).setVariable('RxTimingRecoveryVariableDelayPartition', RxTimingRecoveryVariableDelayPartition);
simInputs(configInd) = simInputs(configInd).setVariable('RxTimingRecoverySymbolClockPartition', RxTimingRecoverySymbolClockPartition);
simInputs(configInd) = simInputs(configInd).setVariable('RxTimingRecoveryEarlyLatePartition', RxTimingRecoveryEarlyLatePartition);
simInputs(configInd) = simInputs(configInd).setVariable('RxSymbGolayCorrelatorPartition', RxSymbGolayCorrelatorPartition);
simInputs(configInd) = simInputs(configInd).setVariable('RxSymbGolayPeakDetectPartition', RxSymbGolayPeakDetectPartition);
simInputs(configInd) = simInputs(configInd).setVariable('RxCoarseCFOPartition', RxCoarseCFOPartition);
simInputs(configInd) = simInputs(configInd).setVariable('RxEQPartition', RxEQPartition);
simInputs(configInd) = simInputs(configInd).setVariable('RxFineCFOPartition', RxFineCFOPartition);
simInputs(configInd) = simInputs(configInd).setVariable('RxFineCFOCorrectComputePartition', RxFineCFOCorrectComputePartition);
simInputs(configInd) = simInputs(configInd).setVariable('RxHeaderDemodPartition', RxHeaderDemodPartition);
simInputs(configInd) = simInputs(configInd).setVariable('RxHeaderParsePartition', RxHeaderParsePartition);
simInputs(configInd) = simInputs(configInd).setVariable('RxDemodPartition', RxDemodPartition);
simInputs(configInd) = simInputs(configInd).setVariable('RxPackerPartition', RxPackerPartition);
simInputs(configInd) = simInputs(configInd).setVariable('RxPacketControllerPartition', RxPacketControllerPartition);
simInputs(configInd) = simInputs(configInd).setVariable('RxFreezeControllerPartition', RxFreezeControllerPartition);
%Other Params
simInputs(configInd) = simInputs(configInd).setVariable('header_len_bytes', header_len_bytes);
simInputs(configInd) = simInputs(configInd).setVariable('mod_scheme_len_bytes', mod_scheme_len_bytes);
simInputs(configInd) = simInputs(configInd).setVariable('crc_len_bytes', crc_len_bytes);
simInputs(configInd) = simInputs(configInd).setVariable('radix', radix);
simInputs(configInd) = simInputs(configInd).setVariable('radixHeader', radixHeader);
simInputs(configInd) = simInputs(configInd).setVariable('radixMax', radixMax);
simInputs(configInd) = simInputs(configInd).setVariable('bitsPerSymbol', bitsPerSymbol);
simInputs(configInd) = simInputs(configInd).setVariable('bitsPerSymbolHeader', bitsPerSymbolHeader);
simInputs(configInd) = simInputs(configInd).setVariable('bitsPerSymbolMax', bitsPerSymbolMax);
simInputs(configInd) = simInputs(configInd).setVariable('bitsPerPackedWordRx', bitsPerPackedWordRx);
simInputs(configInd) = simInputs(configInd).setVariable('modKeys', modKeys);
simInputs(configInd) = simInputs(configInd).setVariable('modBPS', modBPS);
simInputs(configInd) = simInputs(configInd).setVariable('payload_len_bytes', payload_len_bytes);
simInputs(configInd) = simInputs(configInd).setVariable('frame_len_bytes', frame_len_bytes);
simInputs(configInd) = simInputs(configInd).setVariable('dataLenSymbols', dataLenSymbols);
simInputs(configInd) = simInputs(configInd).setVariable('payload_len_symbols', payload_len_symbols);
simInputs(configInd) = simInputs(configInd).setVariable('carrierFreq', carrierFreq);
simInputs(configInd) = simInputs(configInd).setVariable('overSampleFreq', overSampleFreq);
simInputs(configInd) = simInputs(configInd).setVariable('overSample', overSample);
simInputs(configInd) = simInputs(configInd).setVariable('baseFreq', baseFreq);
simInputs(configInd) = simInputs(configInd).setVariable('basePer', basePer);
simInputs(configInd) = simInputs(configInd).setVariable('overSamplePer', overSamplePer);
simInputs(configInd) = simInputs(configInd).setVariable('golayType', golayType);
simInputs(configInd) = simInputs(configInd).setVariable('golay_type', golay_type);
simInputs(configInd) = simInputs(configInd).setVariable('Ga_32', Ga_32);
simInputs(configInd) = simInputs(configInd).setVariable('Gb_32', Gb_32);
simInputs(configInd) = simInputs(configInd).setVariable('D_32', D_32);
simInputs(configInd) = simInputs(configInd).setVariable('W_32', W_32);
simInputs(configInd) = simInputs(configInd).setVariable('Gu_128_s', Gu_128_s);
simInputs(configInd) = simInputs(configInd).setVariable('Gv_128_s', Gv_128_s);
simInputs(configInd) = simInputs(configInd).setVariable('nSpectrum_STFRepCount_short', nSpectrum_STFRepCount_short);
simInputs(configInd) = simInputs(configInd).setVariable('nSpectrum_STFRep_short', nSpectrum_STFRep_short);
simInputs(configInd) = simInputs(configInd).setVariable('nSpectrum_STFNeg_short', nSpectrum_STFNeg_short);
simInputs(configInd) = simInputs(configInd).setVariable('nSpectrum_STFFin_short', nSpectrum_STFFin_short);
simInputs(configInd) = simInputs(configInd).setVariable('nSpectrumAck_STFRepCount_short', nSpectrumAck_STFRepCount_short);
simInputs(configInd) = simInputs(configInd).setVariable('nSpectrumAck_STFRep_short', nSpectrumAck_STFRep_short);
simInputs(configInd) = simInputs(configInd).setVariable('nSpectrumAck_STFNeg_short', nSpectrumAck_STFNeg_short);
simInputs(configInd) = simInputs(configInd).setVariable('nSpectrumAck_STFFin_short', nSpectrumAck_STFFin_short);
simInputs(configInd) = simInputs(configInd).setVariable('xSpectrum_STF_short', xSpectrum_STF_short);
simInputs(configInd) = simInputs(configInd).setVariable('xSpectrum_CEF_short', xSpectrum_CEF_short);
simInputs(configInd) = simInputs(configInd).setVariable('xSpectrum_PRE_short', xSpectrum_PRE_short);
simInputs(configInd) = simInputs(configInd).setVariable('x_STF', x_STF);
simInputs(configInd) = simInputs(configInd).setVariable('x_STFRepCount', x_STFRepCount);
simInputs(configInd) = simInputs(configInd).setVariable('x_CEF', x_CEF);
simInputs(configInd) = simInputs(configInd).setVariable('x_PRE', x_PRE);
simInputs(configInd) = simInputs(configInd).setVariable('preLen', preLen);
simInputs(configInd) = simInputs(configInd).setVariable('x_PRE_adj', x_PRE_adj);
simInputs(configInd) = simInputs(configInd).setVariable('after', after);
simInputs(configInd) = simInputs(configInd).setVariable('cefLen', cefLen);
simInputs(configInd) = simInputs(configInd).setVariable('crc_poly', crc_poly);
simInputs(configInd) = simInputs(configInd).setVariable('crc_init', crc_init);
simInputs(configInd) = simInputs(configInd).setVariable('crc_xor', crc_xor);
simInputs(configInd) = simInputs(configInd).setVariable('corr_peak_trigger', corr_peak_trigger);
simInputs(configInd) = simInputs(configInd).setVariable('corr_peak_exclude_trigger', corr_peak_exclude_trigger);
simInputs(configInd) = simInputs(configInd).setVariable('rcFiltRolloffFactor', rcFiltRolloffFactor);
simInputs(configInd) = simInputs(configInd).setVariable('rcFiltSpanSymbols', rcFiltSpanSymbols);
simInputs(configInd) = simInputs(configInd).setVariable('rcFileLinearAmpGain', rcFileLinearAmpGain);
simInputs(configInd) = simInputs(configInd).setVariable('rcSqrtFilt', rcSqrtFilt);
simInputs(configInd) = simInputs(configInd).setVariable('rcTxFilt', rcTxFilt);
simInputs(configInd) = simInputs(configInd).setVariable('rcRxFilt', rcRxFilt);
simInputs(configInd) = simInputs(configInd).setVariable('rcNormalFilt', rcNormalFilt);
simInputs(configInd) = simInputs(configInd).setVariable('rcNormalFilt', rcNormalFilt);
simInputs(configInd) = simInputs(configInd).setVariable('rcFiltSpanSamp', rcFiltSpanSamp);
simInputs(configInd) = simInputs(configInd).setVariable('rcFiltGrpDelay', rcFiltGrpDelay);
simInputs(configInd) = simInputs(configInd).setVariable('agc_detector_taps', agc_detector_taps);
simInputs(configInd) = simInputs(configInd).setVariable('agcSaturation', agcSaturation);
simInputs(configInd) = simInputs(configInd).setVariable('agc_sat_up', agc_sat_up);
simInputs(configInd) = simInputs(configInd).setVariable('agc_sat_low', agc_sat_low);
simInputs(configInd) = simInputs(configInd).setVariable('agcDesired', agcDesired);
simInputs(configInd) = simInputs(configInd).setVariable('agcStep', agcStep);
simInputs(configInd) = simInputs(configInd).setVariable('agcSettleThresh', agcSettleThresh);
simInputs(configInd) = simInputs(configInd).setVariable('timing_correlator_pipeline', timing_correlator_pipeline);
simInputs(configInd) = simInputs(configInd).setVariable('timing_differentiator_len', timing_differentiator_len);
simInputs(configInd) = simInputs(configInd).setVariable('timing_differentiator_grpDelay_roundUp', timing_differentiator_grpDelay_roundUp);
simInputs(configInd) = simInputs(configInd).setVariable('timingDifferentiatorFiltObj', timingDifferentiatorFiltObj);
simInputs(configInd) = simInputs(configInd).setVariable('timingDifferentiatorFilt', timingDifferentiatorFilt);
simInputs(configInd) = simInputs(configInd).setVariable('timingRecoveryFreqCorrectionAvgLen', timingRecoveryFreqCorrectionAvgLen);
simInputs(configInd) = simInputs(configInd).setVariable('timingRecoveryFreqCorrectionDiscardLastN', timingRecoveryFreqCorrectionDiscardLastN);
simInputs(configInd) = simInputs(configInd).setVariable('trTappedDelayBase', trTappedDelayBase);
simInputs(configInd) = simInputs(configInd).setVariable('trFarrowTaps', trFarrowTaps);
simInputs(configInd) = simInputs(configInd).setVariable('trTappedDelayLen', trTappedDelayLen);
simInputs(configInd) = simInputs(configInd).setVariable('trInitialDelay', trInitialDelay);
simInputs(configInd) = simInputs(configInd).setVariable('trLenToFSM', trLenToFSM);
simInputs(configInd) = simInputs(configInd).setVariable('trMatch', trMatch);
simInputs(configInd) = simInputs(configInd).setVariable('trEarlyLateAvgNumSamp', trEarlyLateAvgNumSamp);
simInputs(configInd) = simInputs(configInd).setVariable('trEarlyLatePGain', trEarlyLatePGain);
simInputs(configInd) = simInputs(configInd).setVariable('trEarlyLateIGain', trEarlyLateIGain);
simInputs(configInd) = simInputs(configInd).setVariable('timingControlToGolay', timingControlToGolay);
simInputs(configInd) = simInputs(configInd).setVariable('trFeedbackPipelining', trFeedbackPipelining);
simInputs(configInd) = simInputs(configInd).setVariable('timing_differentiator_pipeline', timing_differentiator_pipeline);
simInputs(configInd) = simInputs(configInd).setVariable('trCorrTargetScaleFactor', trCorrTargetScaleFactor);
simInputs(configInd) = simInputs(configInd).setVariable('trCorrScaleFactor', trCorrScaleFactor);
simInputs(configInd) = simInputs(configInd).setVariable('trIntPhaseCounterInit', trIntPhaseCounterInit);
simInputs(configInd) = simInputs(configInd).setVariable('enableTRFreqCorrection', enableTRFreqCorrection);
simInputs(configInd) = simInputs(configInd).setVariable('timing_p', timing_p);
simInputs(configInd) = simInputs(configInd).setVariable('timingMaxSymbols', timingMaxSymbols);
simInputs(configInd) = simInputs(configInd).setVariable('timing_tolerance', timing_tolerance);
simInputs(configInd) = simInputs(configInd).setVariable('timing_cefEarlyWarningTollerance', timing_cefEarlyWarningTollerance);
simInputs(configInd) = simInputs(configInd).setVariable('cfoNcoQuantizedAccumBits', cfoNcoQuantizedAccumBits);
simInputs(configInd) = simInputs(configInd).setVariable('cfoNcoWordLen', cfoNcoWordLen);
simInputs(configInd) = simInputs(configInd).setVariable('lmsEqDepth', lmsEqDepth);
simInputs(configInd) = simInputs(configInd).setVariable('lmsStep_init', lmsStep_init);
simInputs(configInd) = simInputs(configInd).setVariable('lmsStep_final', lmsStep_final);
simInputs(configInd) = simInputs(configInd).setVariable('lmsStep_meta', lmsStep_meta);
simInputs(configInd) = simInputs(configInd).setVariable('qam16Mod', qam16Mod);
simInputs(configInd) = simInputs(configInd).setVariable('qam16_points', qam16_points);
simInputs(configInd) = simInputs(configInd).setVariable('qam16_power_normalized_distance', qam16_power_normalized_distance);
simInputs(configInd) = simInputs(configInd).setVariable('qam16_hdl_distance', qam16_hdl_distance);
simInputs(configInd) = simInputs(configInd).setVariable('qam16_demod_scale_factor', qam16_demod_scale_factor);
simInputs(configInd) = simInputs(configInd).setVariable('cr_smooth_samples', cr_smooth_samples);
simInputs(configInd) = simInputs(configInd).setVariable('cr_p', cr_p);
simInputs(configInd) = simInputs(configInd).setVariable('cr_i', cr_i);
simInputs(configInd) = simInputs(configInd).setVariable('cr_i_preamp', cr_i_preamp);
simInputs(configInd) = simInputs(configInd).setVariable('cr_integrator1_saturation', cr_integrator1_saturation);
simInputs(configInd) = simInputs(configInd).setVariable('cr_integrator1_decay', cr_integrator1_decay);
simInputs(configInd) = simInputs(configInd).setVariable('cr_saturation2', cr_saturation2);
simInputs(configInd) = simInputs(configInd).setVariable('cr_int1_sat_up', cr_int1_sat_up);
simInputs(configInd) = simInputs(configInd).setVariable('cr_int1_sat_low', cr_int1_sat_low);
simInputs(configInd) = simInputs(configInd).setVariable('cr_sat2_up', cr_sat2_up);
simInputs(configInd) = simInputs(configInd).setVariable('cr_sat2_low', cr_sat2_low);
simInputs(configInd) = simInputs(configInd).setVariable('fineCFOPipeline', fineCFOPipeline);
simInputs(configInd) = simInputs(configInd).setVariable('cefEarlyWarning', cefEarlyWarning);
simInputs(configInd) = simInputs(configInd).setVariable('RxFeedbackPipelining', RxFeedbackPipelining);
simInputs(configInd) = simInputs(configInd).setVariable('feedbackResetBuffer', feedbackResetBuffer);
simInputs(configInd) = simInputs(configInd).setVariable('delayToOutputFromDataFSM', delayToOutputFromDataFSM);
simInputs(configInd) = simInputs(configInd).setVariable('timingRecoveryDoneSamplesEarly', timingRecoveryDoneSamplesEarly);
simInputs(configInd) = simInputs(configInd).setVariable('minSTFPeaks', minSTFPeaks);
simInputs(configInd) = simInputs(configInd).setVariable('freeze_agc_in_CEF', freeze_agc_in_CEF);
simInputs(configInd) = simInputs(configInd).setVariable('freeze_agc_in_HeaderPayload', freeze_agc_in_HeaderPayload);
simInputs(configInd) = simInputs(configInd).setVariable('freeze_fineCFO_in_CEF', freeze_fineCFO_in_CEF);
simInputs(configInd) = simInputs(configInd).setVariable('freeze_fineCFO_in_HeaderPayload', freeze_fineCFO_in_HeaderPayload);
simInputs(configInd) = simInputs(configInd).setVariable('RxFreezeFeedbackPipelining', RxFreezeFeedbackPipelining);